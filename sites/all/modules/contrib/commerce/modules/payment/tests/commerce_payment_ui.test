<?php

/**
 * @file
 * Functional tests for the commerce payment module.
 */

/**
 * Test checkout process.
 */
class CommercePaymentUITest extends CommerceBaseTestCase {

  /**
   * Normal user (without admin or store permissions) for testing.
   */
  protected $normal_user;

  /**
   * Checkout url.
   */
  protected $checkout_url;

  /**
   * Order object.
   */
  protected $order;

  /**
   * Implementation of getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Payment user interface',
      'description' => 'Test the payment user and administrator interfaces.',
      'group' => 'Drupal Commerce',
    );
  }

  /**
   * Implementation of setUp().
   */
  function setUp() {
    $modules = parent::setUpHelper('all');
    parent::setUp($modules);

    // User creation for different operations.
    $this->site_admin = $this->createSiteAdmin();
    $this->store_admin = $this->createStoreAdmin();
    $this->normal_user = $this->drupalCreateUser(array('access checkout'));

    // The rule that sends a mail after checkout completion should be disabled
    //  as it returns an error caused by how mail messages are stored.
    $rules_config = rules_config_load('commerce_checkout_order_email');
    $rules_config->active = FALSE;
    $rules_config->save();

    // Get the checkout url.
    $links = commerce_line_item_summary_links();
    $this->checkout_url = $links['checkout']['href'];
  }

  /**
   * Generate random valid information for Address information.
   */
  protected function generateAddressInformation() {
    $address_info['name_line'] = $this->randomName();
    $address_info['thoroughfare'] = $this->randomName();
    $address_info['locality'] = $this->randomName();
    $address_info['postal_code'] = rand(00000, 99999);

    return $address_info;
  }

  /**
   * Create a dummy order and go to checkout payment page.
   */
  protected function createOrderAndGoToPayment($user = NULL, $products = array()) {
    if (empty($user)) {
      $user = $this->normal_user;
    }

    // Log in as normal user.
    $this->drupalLogin($user);

    // Order creation, in cart status.
    $this->order = $this->createDummyOrder($user->uid, $products);

    // Go to checkout page.
    $this->drupalGet($this->checkout_url);

    // Check if the page resolves and if the default panes are present.
    $this->assertResponse(200);
    $this->assertTitle(t('Checkout') . ' | Drupal', t('Checkout page successfully loaded'));

    // Generate random information, as city, postal code, etc.
    $address_info = $this->generateAddressInformation();

    // Fill in the billing address information
    $billing_pane = $this->xpath("//select[starts-with(@name, 'customer_profile_billing[commerce_customer_address]')]");
    $this->drupalPostAJAX(NULL, array((string) $billing_pane[0]['name'] => 'US'), (string) $billing_pane[0]['name']);

    // Check if the country has been selected correctly, this uses XPath as the
    // ajax call replaces the element and the id may change.
    $this->assertFieldByXPath("//select[starts-with(@id, 'edit-customer-profile-billing-commerce-customer-address')]//option[@selected='selected']", 'US', t('Country selected'));

    // Fill in the required information for billing pane, with a random State.
    $info = array(
      'customer_profile_billing[commerce_customer_address][und][0][name_line]' => $address_info['name_line'],
      'customer_profile_billing[commerce_customer_address][und][0][thoroughfare]' => $address_info['thoroughfare'],
      'customer_profile_billing[commerce_customer_address][und][0][locality]' => $address_info['locality'],
      'customer_profile_billing[commerce_customer_address][und][0][administrative_area]' => 'KY',
      'customer_profile_billing[commerce_customer_address][und][0][postal_code]' => $address_info['postal_code'],
    );
    $this->drupalPost(NULL, $info, t('Continue'));

    // Check for default panes and information in this checkout phase.
    $this->assertTitle(t('Review order') . ' | Drupal', t('Review order page successfully loaded'));
  }

  /**
   * Test the payment on checkout process using an authenticated user.
   */
  public function testCommercePaymentCheckout() {
    $this->createOrderAndGoToPayment();

    $this->assertText('Example payment', t('Example payment method panel is present'));

    // Test payment information validation. Payment example module name field
    // will fail for single character value.
    $this->drupalPost(NULL, array('commerce_payment[payment_details][name]' => $this->randomName(1)), t('Continue'));
    $this->assertTitle(t('Review order') . ' | Drupal', t('We should still be on review order page'));
    $this->assertText(t('You must enter a name two or more characters long.'), t('Validation error message found on the page'));

    // Finish checkout process.
    $this->drupalPost(NULL, array('commerce_payment[payment_details][name]' => $this->randomName()), t('Continue'));

    // Load payment to check its status.
    $payment = commerce_payment_transaction_load_multiple(array(), array('order_id' => $this->order->order_id), TRUE);

    // Order status should be pending when completing checkout process.
    $this->assertEqual(reset($payment)->status, 'success', t('Payment was successfully processed'));

    // Check if the completion message has been displayed.
    $this->assertTitle(t('Checkout complete') . ' | Drupal', t('Checkout process completed successfully'));
  }

  /**
   * Test the adding payments using administration pages.
   */
  public function testCommercePaymentAdministration() {
    // Log in as normal user.
    $this->drupalLogin($this->normal_user);

    // Order creation, in cart status.
    $this->order = $this->createDummyOrder($this->normal_user->uid);

    // Log in as administrator user.
    $this->drupalLogin($this->store_admin);

    // Go to payment administration page.
    $this->drupalGet('admin/commerce/orders/' . $this->order->order_id . '/payment');

    $this->assertResponse(200);
    $this->assertText(t('Payment'), t('Payment text found on the page.'));

    // Check order balance.
    $balance = commerce_payment_order_balance($this->order);
    $this->assertRaw('<td class="label">' . t('Order balance') . '</td><td class="balance">' . commerce_currency_format($balance['amount'], $balance['currency_code']) . '</td>', t('Order balance is equal to order amount'));

    // Add a payment for half of balance.
    $this->drupalPostAJAX(NULL, array('payment_method' => 'commerce_payment_example|commerce_payment_commerce_payment_example'), array('op' => t('Add payment')));
    $this->assertFieldByXPath("//input[starts-with(@id, 'edit-amount')]", NULL, t('Amount field is present'));
    $this->assertFieldByXPath("//select[starts-with(@id, 'edit-currency-code')]", NULL, t('Currency code field is present'));
    $this->assertFieldByXPath("//input[starts-with(@id, 'edit-payment-details-name')]", NULL, t('Name text field from payment example module is present'));
    $this->assertFieldByXPath("//input[starts-with(@id, 'edit-submit')]", NULL, t('Save button is present'));
    $post_data = array(
      'amount' => ($balance['amount'] / 2),
      'currency_code' => 'USD',
      'payment_details[name]' => $this->randomName(),
    );
    $this->drupalPost(NULL, $post_data, t('Save'));

    // Reload the order.
    $order = reset(commerce_order_load_multiple(array($this->order->order_id), array(), TRUE));

    // Check order balance, it should be half of total now.
    $new_balance = commerce_payment_order_balance($order);
    $this->assertEqual($new_balance['amount'], ($balance['amount'] - $post_data['amount']), t('Order balance is now half order amount'));
    $this->assertRaw('<td class="label">' . t('Total paid') . '</td><td class="total">' . commerce_currency_format($post_data['amount'], $post_data['currency_code']) . '</td>', t('Total paid now reflects the new payment'));
    $this->assertRaw('<td class="label">' . t('Order balance') . '</td><td class="balance">' . commerce_currency_format($new_balance['amount'], $new_balance['currency_code']) . '</td>', t('Order balance is displayed correctly'));
  }

  /**
   * Test payment method rules conditions.
   */
  public function testCommercePaymentMethodsAdministration() {
    // Log in as store administrator user.
    $this->drupalLogin($this->store_admin);

    // Go to payment methods page.
    $this->drupalGet('admin/commerce/config/payment-methods');
    $this->assertResponse(200);
    $this->assertTitle(t('Payment methods') . ' | Drupal', t('We are now in the payment methods page'));
    $this->assertText(t('Example payment'), t('Example payment rule is present'));

    // Go to edit example payment rule.
    $this->clickLink(t('Example payment'));

    // Adding a new condition.
    $this->clickLink(t('Add condition'));

    // Create new data comparison condition for amount > $50.
    $this->drupalPost(NULL, array('element_name' => 'data_is'), t('Continue'));
    $this->assertText(t('Compare two data values of the same type with each other.'), t('Second step page for adding a condition was successfully loaded'));
    $this->drupalPost(NULL, array('parameter[data][settings][data:select]' => 'order:commerce-order-total:amount'), t('Continue'));
    $this->assertText(t('The data to be compared, specified by using a data selector, e.g. "node:author:name".'), t('Third step page for adding a condition was successfully loaded'));
    $this->drupalPost(NULL, array('parameter[op][settings][op]' => '>', 'parameter[value][settings][value]' => 50), t('Save'));
    $this->assertText(t('Your changes have been saved.'), t('New condition was successfully added'));

    // Adding a new action to enable the payment method if conditions are met.
    $this->clickLink(t('Add action'));
    $this->drupalPost(NULL, array('element_name' => 'commerce_payment_enable_commerce_payment_example'), t('Continue'));
    $this->drupalPost(NULL, array('parameter[commerce_order][settings][commerce_order:select]' => 'order'), t('Save'));
    $this->assertText(t('Your changes have been saved.'), t('New action was successfully added'));


    // Create a less than $50 order.
    $products = array(
       // We set price here to 1 cent, since createDummyProduct sets line item
       // quantity ramdomly up to 100. So we need to ensure the order total will
       // not be more than $50.
       $this->createDummyProduct($this->randomName(), $this->randomName(), .01, 'USD', $this->store_admin->uid),
    );
    $this->createOrderAndGoToPayment($this->normal_user, $products);
    // Check that the payment method example is *not* there.
    $this->assertNoText('Example payment', t('Example payment method panel is not present'));

    // Create a more than $50 order.
    $products = array(
       $this->createDummyProduct($this->randomName(), $this->randomName(), 60, 'USD', $this->store_admin->uid),
    );
    $this->createOrderAndGoToPayment($this->normal_user, $products);
    // Check that the payment method example is there.
    $this->assertText('Example payment', t('Example payment method panel is present'));
  }

}
